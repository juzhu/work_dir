var bodyParser    = require('body-parser');
var orderDB = require("./db_orders.js").orderDB
var marketDB = require("./db_market.js").marketDB
var userDB = require("./db_user.js").orderDB
var OrderLogger = require('./order_log.js').OrderLogger;
var juzhuMQPro = require('../../../juzhu_mq_pro/js_comm/juzhu_mq_comm.js');
var PostmanUser = require('./post_user.js');
var ticketManager = require("./session_manager.js").ticketManager;
var errorCode = require("../errcode.js");
var oaLog = require("./oa_log.js").logOP;

var postInfo = [
  {"name":"徐龙", "value":"xulong"},
  {"name":"小罗", "value":"xiaoluo"},
  {"name":"小王", "value":"xiaowang"},
  {"name":"家明", "value":"huangjiaming"},
  {"name":"zhagnqichegn", "value":"zhangqisheng"}
]

var cookInfo = [
  {"name":"唐雄伟", "value":"唐雄伟"},
  {"name":"张平", "value":"张平"},
  {"name":"张远", "value":"张远"},
  {"name":"陈亮", "value":"陈亮"},
  {"name":"无序烹饪", "value":"无需烹饪"},
]

var assistentInfo = [
  {"name":"李琳珂", "value":"李琳珂"},
  {"name":"张平", "value":"张平"},
  {"name":"韦丽芬", "value":"韦丽芬"},
  {"name":"无需配菜", "value":"无需配菜"},
]

function getStoreName(req) {
  var storeName = req.session.storeName;
  // TODO session 没有尝试cookie
  if (storeName === undefined) {
    storeName = '前进店';
  }
  return storeName;
}
module.exports = function (app) {
  app.use(bodyParser.json());       // to support JSON-encoded bodies
  app.use(bodyParser.urlencoded({   // to support URL-encoded bodies
    extended: true
  }));

  app.post('/test', function(req, res) {
    console.log(req.body);
    res.send("ok");
  });


  app.get('/', function(req, res) {
    res.redirect("/all_order/all/today/today");
  });
  app.get('/add_prod', function(req, res) {
    res.render("add_prod");
  });


  app.get('/dish_info/:bdate/:edate', function(req, res) {
    var bdate = req.params.bdate;
    var edate = req.params.edate;
    if( bdate == "today" ) {
      var d = new Date();
      var mon = d.getMonth() + 1;
      if( mon < 10 ) {
        mon = "0" + mon;
      }
      var day = d.getDate();
      if( day < 10 ) {
        day = "0" + day;
      }
      bdate = d.getFullYear() + "-" + mon + '-' + day;
      edate = bdate;
    }
    console.log("dish_info from bdate " + bdate + " edate: " + edate);
    orderDB.dishInfo(bdate,edate, function(err, results) {
      var groupData = {};
      results.forEach(function(dish_info) {
        var dish_group_info = groupData[dish_info.dish_name];
        if (dish_group_info === undefined) {
          dish_group_info = {}
          dish_group_info["dish_name"] = dish_info.dish_name;
          dish_group_info["num"] = dish_info.num;
          groupData[dish_info.dish_name] = dish_group_info;
        } else {
          dish_group_info.num += dish_info.num;
        }
      });
      var dishDroupInfoArray = [];
      for (dish in groupData) {
        dishDroupInfoArray.push(groupData[dish]);
      }
      dishDroupInfoArray.sort(function(a, b) {
        return b.num - a.num;
      })
      res.render("dish_info", {
        items_len:results.length,
        items:results,
        bdate:bdate,
        edate:edate,
        user_name: req.session.userName,
        group_items:dishDroupInfoArray,
        group_items_len:groupData.length,
      })
    });
  });

  app.get('/set_wechat_name/:uid/:name', function(req, res) {
    var uid = req.params.uid;
    var name = req.params.name;
    var ret = {"error":false}
    userDB.setUserWeChatName(uid, name, function(err) {
      console.log("setUserWeChatName err " + err);
      ret.error = err;
      res.send(ret)
    });
  })

  app.get('/all_order_detail/:platform/:bdate/:edate', function(req, res) {
    oaLog(req);
    var platform = req.params.platform;
    var bdate = req.params.bdate;
    var edate = req.params.edate;
    var storeName = getStoreName(req);
    if( bdate == "today" ) {
      var d = new Date();
      var mon = d.getMonth() + 1;
      if( mon < 10 ) {
        mon = "0" + mon;
      }
      var day = d.getDate();
      if( day < 10 ) {
        day = "0" + day;
      }
      bdate = d.getFullYear() + "-" + mon + '-' + day;
      edate = bdate;
    }

    orderDB.getOrderByPlatform(storeName, platform, bdate, edate, function(err, data){
      if (err) {
        res.render('index', {title : "聚箸数据后台", services : [], data : {}, bdate:bdate,edate:edate});
        return;
      }
      var orders = [];
      var orders_invalid = [];
      for (index in data) {
        if (data[index].order_valid) {
          orders.push(data[index]);
        } else {
          orders_invalid.push(data[index]);
        }
      }
      console.log(req.session);
      // res.render('order_status', {
      res.render('all_order_detail', {
        platform: platform,
        title : "聚箸OA",
        items : orders,
        user_name: req.session.userName,
        items_len: orders.length,
        items_invalid:orders_invalid,
        items_invalid_len:orders_invalid.length,
        bdate: bdate,
        edate: edate
      });
    });
  });


  app.get('/all_order/:platform/:bdate/:edate', function(req, res) {
    oaLog(req);
    var platform = req.params.platform;
    var bdate = req.params.bdate;
    var edate = req.params.edate;
    var storeName = getStoreName(req);
    if( bdate == "today" ) {
      var d = new Date();
      var mon = d.getMonth() + 1;
      if( mon < 10 ) {
        mon = "0" + mon;
      }
      var day = d.getDate();
      if( day < 10 ) {
        day = "0" + day;
      }
      bdate = d.getFullYear() + "-" + mon + '-' + day;
      edate = bdate;
    }

    console.log("get order for platform: " + platform + ",from: " + bdate +  ", to: " + edate + " storeName: " + storeName);

    orderDB.getOrderByPlatform(storeName, platform, bdate, edate, function(err, data){
      if (err) {
        res.render('index', {title : "聚箸数据后台", services : [], data : {}, bdate:bdate,edate:edate});
        return;
      }
      var orders = [];
      var orders_invalid = [];
      for (index in data) {
        if (data[index].order_valid) {
          orders.push(data[index]);
        } else {
          orders_invalid.push(data[index]);
        }
      }
      console.log(JSON.stringify(orders_invalid));
      res.render('all_order_tb', {
        platform: platform,
        title : "聚箸OA",
        items : orders,
        user_name: req.session.userName,
        items_len: orders.length,
        items_invalid:orders_invalid,
        items_invalid_len:orders_invalid.length,
        user_name: req.session.userName,
        bdate: bdate,
        edate: edate
      });
    });
  });

  // 所有等待配送的  不分时间 平台
  app.get('/order_wait_send', function(req, res) {
    orderDB.getOrderByStatus(getStoreName(req), 1, function(err, data){
      if (err) {
        res.send("error + " + err);
        return;
      }
      res.render('wait_send', {
        title : "聚箸OA",
        order_status:1,
        items : data,
        user_name: req.session.userName,
        items_len: data.length,
        post_info:postInfo,
      });
    });
  });

  app.get('/order_sending', function(req, res) {
    orderDB.getOrderByStatus(getStoreName(req), 2, function(err, data){
      if (err) {
        res.send("error + " + err);
        return;
      }
      res.render('wait_sending', {
        title : "聚箸OA",
        order_status:2,
        items : data,
        user_name: req.session.userName,
        items_len: data.length,
        post_info:postInfo,
      });
    });
  });

  app.get('/order_wait_recycle', function(req, res) {
    orderDB.getOrderByStatus(getStoreName(req), 3, function(err, data){
      if (err) {
        res.send("error + " + err);
        return;
      }
      res.render('wait_recycle', {
        title : "聚箸OA",
        order_status:3,
        items : data,
        items_len: data.length,
        user_name: req.session.userName,
        post_info:postInfo,
      });
    });
  });
  app.get('/order_recycling', function(req, res) {
    orderDB.getOrderByStatus(getStoreName(req), 4, function(err, data){
      if (err) {
        res.send("error + " + err);
        return;
      }
      res.render('wait_recycling', {
        title : "聚箸OA",
        order_status:4,
        items : data,
        items_len: data.length,
        user_name: req.session.userName,
        post_info:postInfo,
      });
    });
  });

  app.get('/order_verify', function(req, res) {
    orderDB.getOrderByStatus(getStoreName(req), 5, function(err, data){
      if (err) {
        res.send("error + " + err);
        return;
      }
      res.render('wait_verify', {
        title : "聚箸OA",
        order_status:5,
        user_name: req.session.userName,
        items : data,
        items_len: data.length,
      });
    });
  });

  app.get('/user_order/:phone', function(req, res) {
    var phone = req.params.phone;
    console.log("get order for user: " + phone);

    orderDB.getOrderByPhone(phone, 0, function(err, data){
      if (err) {
        res.render('index', {title : "聚箸数据后台", services : [], data : {}});
        return;
      }
      console.log(JSON.stringify(data));
      res.render('user_order', {
        phone:phone,
        user_name: req.session.userName,
        title : "聚箸OA",
        items : data
      });
    });
  });

  app.get('/income_summary/:bdate/:edate', function(req, res) {
    oaLog(req);
    var bdate = req.params.bdate;
    var edate = req.params.edate;

    if( bdate == "today" ) {
      var d = new Date();
      var mon = d.getMonth() + 1;
      if( mon < 10 ) {
        mon = "0" + mon;
      }
      var day = d.getDate();
      if( day < 10 ) {
        day = "0" + day;
      }
      bdate = d.getFullYear() + "-" + mon + '-' + day;
      edate = bdate;
    }
    console.log("get income_summary, from: " + bdate +  ", to: " + edate);

    orderDB.getIncomeByOrder(bdate, edate, function(err, data){
      if (err) {
        res.render('index', {title : "聚箸数据后台", services : [], data : {}});
        return;
      }
      console.log(JSON.stringify(data));
      res.render('income_summary', {
        title : "聚箸OA",
        user_name: req.session.userName,
        items : data,
        bdate: bdate,
        edate: edate
      });
    });
  });
  app.get('/user/:filter_name/:filter', function(req, res) {
    // filter_name: addr/phone/name/all
    // filter: 根据filter_name进行地址  电话  名字的模糊匹配 all 所有
    var filter_name = req.params.filter_name;
    var filter      = req.params.filter;
    userDB.getUserByCondition(filter_name, filter, function(err, data) {
      if (err) {
        res.render('index', {title : "聚箸数据后台", services : [], data : {}});
        return;
      }
      console.log(JSON.stringify(data));
      res.render('user_info', {
        title : "聚箸OA",
        user_name: req.session.userName,
        items : data,
      });

    });
  });

  app.get('/userwithorder/:orderbycolumn/:order', function(req, res) {
    // filter_name: addr/phone/name/all
    // filter: 根据filter_name进行地址  电话  名字的模糊匹配 all 所有
    var orderByColumn = req.params.orderbycolumn;
    var order      = req.params.order;
    userDB.getUserWithOrderBY(orderByColumn, order, function(err, data) {
      if (err) {
        res.render('index', {title : "聚箸数据后台", services : [], data : {}});
        return;
      }
      //  console.log(JSON.stringify(data));
      res.render('user_info', {
        title : "聚箸OA",
        items : data,
        items_len: data.length,
        orderby : orderByColumn,
        user_name: req.session.userName,
        order: order
      });

    });
  });

  app.get('/show_post_user_list/:order_id/:status', function(req, res) {
    var order_id = req.params.order_id;
    var status   = req.params.status;

    userDB.getAllPostUser(function(err, data) {
      if (err) {
        res.render('index', {title : "聚箸数据后台", services : [], data : {}});
        return;
      }
      //console.log(JSON.stringify(data));
      res.render('show_post_user_list', {
        title : "聚箸OA",
        items : data,
        items_len: data.length,
        user_name: req.session.userName,
        order_id : order_id,
        status: status
      });
    });
  });
  app.get("/order_progress", function(req, res) {
    orderDB.orderProgressInfo(getStoreName(req), function(err, dishes) {
      if (err) {
        res.render('index', {title : "聚箸数据后台", services : [], data : {}});
        return;
      }
      // 累加当前每个菜总量

      dishes.forEach(function(dishInfo) {
        if (dishInfo.wait_minute < 30) {
          dishInfo.order_color = '#5FEE00';
        } else if (dishInfo.wait_minute < 60) {
          dishInfo.order_color = '#3884B7';
        } else {
          dishInfo.order_color = '#EE0000';
        }
      });
      //console.log(JSON.stringify(data));
      res.render('order_progress_view', {
        title : "聚箸OA",
        user_name: req.session.userName,
        items : dishes,
        items_len: dishes.length,
      });
    });
  });

  app.post("/express_order/:order_id", function(req, res) {
    var orderID = req.params.order_id;
    var ret = {"error" : false};
    orderDB.expressOrder(orderID, function(err,dbInfo) {
      console.log("送出订单" + orderID + " info " + JSON.stringify(dbInfo));
      if (err) {
        ret["error"] = true;
        ret["msg"] = "数据库出错 " + JSON.stringify(err);
      } else if (dbInfo.affectedRows == 0) {
        ret["error"] = true;
        ret["msg"] = "出菜完毕之后才能配送"
      }
      res.send(ret);
    });
  });


  app.get("/cook_assign_view", function(req, res) {
    orderDB.dishWaitAssign(getStoreName(req), function(err, dishes) {
      if (err) {
        res.render('index', {title : "聚箸数据后台", services : [], data : {}});
        return;
      }
      // 累加当前每个菜总量

      var dishCnt = {};
      dishes.forEach(function(dishInfo) {
        if (dishInfo.wait_minute < 30) {
          dishInfo.order_color = '#5FEE00';
        } else if (dishInfo.wait_minute < 60) {
          dishInfo.order_color = '#3884B7';
        } else {
          dishInfo.order_color = '#EE0000';
        }
        if (dishCnt[dishInfo.dish_name] === undefined) {
          dishCnt[dishInfo.dish_name] = 1;
        } else{
          dishCnt[dishInfo.dish_name] += 1;
        }
      });
      dishes.forEach(function(dishInfo) {
        dishInfo.curTotalCnt = dishCnt[dishInfo.dish_name];
      });
      //console.log(JSON.stringify(data));
      res.render('cook_view', {
        title : "聚箸OA",
        items : dishes,
        items_len: dishes.length,
        user_name: req.session.userName,
        cook_info:cookInfo,
        assistent_info:assistentInfo,
      });
    });
  });

  app.get("/cook_finish_view", function(req, res) {
    orderDB.dishWaitFinish(getStoreName(req),function(err, dishes) {
      if (err) {
        res.render('index', {title : "聚箸数据后台", services : [], data : {}});
        return;
      }
      //console.log(JSON.stringify(data));
      res.render('cook_finish', {
        title : "聚箸OA",
        items : dishes,
        items_len: dishes.length,
        user_name: req.session.userName,
        cook_info:cookInfo,
        assistent_info:assistentInfo,
      });
    });
  });

  app.get('/update_user_post_tb/:order_id/:status', function(req, res) {
    oaLog(req);
    var order_id = req.params.order_id;
    var status   = req.params.status;

    var ret = {"error": false};
    orderDB.updateUserPostTb(order_id, status, function(err, data) {
      if (err) {
        ret = {"error": true};
        res.send(ret);
        return;
      }
      res.send(ret);
    });
  });

  app.post("/assign_dish/:order_id", function(req, res) {
    var orderID = req.params.order_id;
    var dishName = req.body['dishName'];
    var assistent = req.body['assistent'];
    var cook = req.body['cook'];
    var ret = {"error" : false};
    if (dishName == '' || assistent == "" || cook == "") {
      console.log(JSON.stringify(req.body) + " post data not ok");
      ret["error"] = true;
      res.send(ret);
      return;
    }
    orderDB.assignDish(orderID, dishName, assistent, cook, function(err) {
      console.log("assignDish for order :" + orderID + " dish/name:" + dishName + " assistent: " + assistent + " cook : " + cook + " return err:" + err);
      if (err) {
        ret["error"] = true;
      }
      res.send(ret);
    });
  });
  app.post("/finish_dish/:order_id", function(req, res) {
    var orderID = req.params.order_id;
    var dishName = req.body['dishName'];
    var assistent = req.body['assistent'];
    var cook = req.body['cook'];
    var ret = {"error" : false};
    orderDB.finishDish(orderID, dishName, assistent, cook, function(err) {
      console.log("finishDish for order :" + orderID + " dish/name:" + dishName + " assistent: " + assistent + " cook : " + cook + " return err:" + err);
      if (err) {
        ret["error"] = true;
      }
      res.send(ret);
    });
  });


  app.post('/order_comment/:order_id', function(req, res) {
    var comment = req.body['comment'];
    var order_id = req.params.order_id;

    var ret = {};
    orderDB.setOrderCommentByUser(order_id, "OA", comment, function(succ, data) {
      if (succ) {
        ret["error"] = 0;
      } else {
        ret["error"] = 1;
        //console.log(JSON.stringify(data));
      }
      res.send(ret);
    });
  });

  app.get('/cancel_order/:order_id', function(req, res) {
    oaLog(req);
    var sessionOK = false;
    var ret = {};
<<<<<<< .mine
    console.log(req.session);
    if (req.session.userName && req.session.userTicket) {
=======
    if (req.session.userName && req.session.ticketID) {
>>>>>>> .r29
      sessionOK = ticketManager.checkTicket(req.session.userName, req.session.ticketID)
    }
    if (!sessionOK) {
      // 登陆页面
      ret["error"] = 1;
      ret["msg"] = '请登录之后再操作';
      res.send(ret);
    } else {
      var order_id = req.params.order_id;
      juzhuMQPro.PublishOrderInvalid(req.params, function(err) {
        console.log("juzhuMQPro.PublishOrderInvalid return " + err);
      });
      orderDB.cancelOrder(order_id, function(err) {
        if (err) {
          ret["error"] = 1;
        } else {
          ret["error"] = 0;
        }
        res.send(ret);
      });
    }
  });

  app.get("/set_order_post/:order_id/:user", function(req, res) {
    oaLog(req);
    var orderID = req.params.order_id;
    var user = req.params.user;

    var opRet = {
      "error" : false,
    }
    orderDB.setOrderPost(orderID, user, 1, function(err) {
      if (err) {
        opRet["error"] = true;
        opRet["msg"] = err;
      }
      res.send(opRet);
    })

    OrderLogger.OrderSendApplyLog(orderID, user, function(success) {
      console.log("OrderSendApplyLog " + success);
    });
  });
  app.get("/set_order_post_complete/:order_id/:user", function(req, res) {
    var orderID = req.params.order_id;
    var user = req.params.user;

    var opRet = {
      "error" : false,
    }
    orderDB.setOrderPost(orderID, user, 2, function(err) {
      if (err) {
        opRet["error"] = true;
        opRet["msg"] = err;
      }
      res.send(opRet);
    })

    OrderLogger.OrderSendCpmpleteLog(orderID, user, function(success) {
      console.log("OrderSendCpmpleteLog " + success);
    });
  });
  app.get("/set_order_recycle/:order_id/:user", function(req, res) {
    var orderID = req.params.order_id;
    var user = req.params.user;

    var opRet = {
      "error" : false,
    }
    orderDB.setOrderRecycle(orderID, user, 1, function(err) {
      if (err) {
        opRet["error"] = true;
        opRet["msg"] = err;
      }
      res.send(opRet);
    });

    OrderLogger.OrderRecycleApplyLog(orderID, user, function(success) {
      console.log("OrderRecycleApplyLog " + success);
    });
  });
  app.get("/set_order_recycle_complete/:order_id/:user", function(req, res) {
    var orderID = req.params.order_id;
    var user = req.params.user;

    var opRet = {
      "error" : false,
    }
    orderDB.setOrderRecycle(orderID, user, 2, function(err) {
      if (err) {
        opRet["error"] = true;
        opRet["msg"] = err;
      }
      res.send(opRet);
    });
    OrderLogger.OrderRecycleCompleteLog(orderID, user, function(success) {
      console.log("OrderRecycleCompleteLog " + success);
    });
  });
  // user 对 order_id的订单进行验收
  app.get("/set_order_recycle_verify/:order_id/:verify_ok", function(req, res) {
    var orderID = req.params.order_id;
    var verifyOK = req.params.verify_ok;
    var sessionOK = false;
    var user = "";
    var ret = {"error" : false};
    console.log(req.session);
    if (req.session.userName && req.session.ticketID) {
      sessionOK = ticketManager.checkTicket(req.session.userName, req.session.ticketID)
      user = req.session.userName;
    }
    if (!sessionOK) {
      // 登陆页面
      ret["error"] = errorCode.sessionError;
      ret["msg"] = '请登录之后再操作';
      res.send(ret);
    } else {
      orderDB.setOrderVerify(orderID, user, verifyOK, function(err) {
        if (err) {
          ret["error"] = true;
          ret["msg"] = err;
        }
        res.send(ret);
      });
    }
  });

  app.get("/market_sms_cb", function(req, res) {
    console.log("market_sms_cb :" + JSON.stringify(req.query));
    var msgID = req.query.msgid;
    var mobile = req.query.mobile;
    var status = req.query.status;
    marketDB.updateSMSRecord(msgID, mobile, status, function(err) {
      console.log(msgID + "-" + mobile + ":" + status);
      res.send("ok");
    });
  });

  app.get("/notice_sms_cb", function(req, res) {
    console.log("notice_sms_cb :" + JSON.stringify(req.query));
    var msgID = req.query.msgid;
    var mobile = req.query.mobile;
    var status = req.query.status;
    marketDB.updateNoticeSMSRecord(msgID, mobile, status, function(err) {
      console.log(msgID + "-" + mobile + ":" + status);
      res.send("ok");
    });
  });

  app.get("/logout", function(req, res) {
    if (req.session.userName) {
      console.log("logout for user: " + req.session.userName);
      delete req.session.userName;
      delete req.session.ticketID;
    }
    res.send("ok");
  });
  app.post('/login', function(req, res, next) {
    //check user name pass..
    var login_ret = {};
    var userName = req.body.user_name;
    var passwd = req.body.passwd;

    PostmanUser.login(userName, passwd, function(err, login_ok) {
      if (!err && login_ok) {
        var ticket = ticketManager.newTicket(userName);
        login_ret['ret'] = true;
        login_ret['ticket'] = ticket;
        req.session.userName = userName;
        req.session.ticketID = ticket.ticketID;
      } else {
        if (err) {
          login_ret['ret'] = errorCode.dbError;
          login_ret['msg'] = "system error";
        } else {
          login_ret['ret'] = errorCode.passwdError;
          login_ret['msg'] = "账号不匹配";
        }
      }
      console.log(req.session);
      res.send(JSON.stringify(login_ret));
    });
  });
  app.get('/switch_store/:store_name', function(req, res, next) {
    //check user name pass..
    var ret = {"error":false};
    var storeName = req.params.store_name;
    // TODO 检查合法性
    req.session.storeName=storeName;
    res.send(ret);
  });
};
